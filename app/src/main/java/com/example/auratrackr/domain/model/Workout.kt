package com.example.auratrackr.domain.model

import java.util.Date

/**
 * Represents the status of a single [Workout] activity.
 */
enum class WorkoutStatus {
    /** The workout is planned but not yet started. */
    PENDING,

    /** The workout is currently in progress. */
    ACTIVE,

    /** The workout has been successfully completed. */
    COMPLETED
}

/**
 * Represents a single, distinct workout activity within a [Schedule].
 *
 * This data class is designed for use with Firestore, with default values provided for all
 * properties to ensure seamless deserialization. It can represent various types of
 * exercises, from timed activities to rep-based ones.
 *
 * @property id A unique identifier for the workout, typically generated by the client.
 * @property title The name of the workout (e.g., "Push-ups", "Morning Run").
 * @property description A brief explanation or instructions for the workout.
 * @property status The current state of the workout, managed by the [WorkoutStatus] enum.
 * @property durationInSeconds The target duration for timed activities. For rep-based workouts, this can be 0.
 * @property reps The target number of repetitions for a single set. For timed workouts, this can be 0.
 * @property sets The target number of sets for the workout.
 * @property lastCompleted A client-set timestamp indicating the last time this workout was completed.
 */
data class Workout(
    val id: String = "",
    val title: String = "",
    val description: String = "",
    val status: WorkoutStatus = WorkoutStatus.PENDING,
    val durationInSeconds: Long = 0L,
    val reps: Int = 0,
    val sets: Int = 0,
    val lastCompleted: Date? = null
) {
    /**
     * A computed property to quickly check if the workout is marked as completed.
     * @return `true` if the status is `COMPLETED`.
     */
    val isCompleted: Boolean
        get() = status == WorkoutStatus.COMPLETED
}